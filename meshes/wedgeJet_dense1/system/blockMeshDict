/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2312                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMetres 1;

// Geometric parameters
D_e 0.35e-3;
D_i 0.6e-3;
D_o 1.0e-3;
D_a 5e-3;
L_e 3e-3;
L_d 10e-3;
L_a 20e-3;
thetaDgr 0.5;

// Cell count
cellsRadialAir 150;
cellsAxialAir 400;

expRatioRadial 5;
expRatioAxial 10;

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
// The rest of the code automatically creates the mesh, using the above parameters.
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// Calculate parameters
thetaRad #calc "degToRad($thetaDgr)";
reverseExpRatioAxial #calc "1.0/$expRatioAxial";
R_e #calc "$D_e /2.0";
R_i #calc "$D_i /2.0";
R_o #calc "$D_o /2.0";
R_a #calc "$D_a /2.0";
Z_b #calc "-$L_e";
Z_e #calc "0";
Z_d #calc "$L_d-$L_e";
Z_a #calc "$L_a-$L_e";

// Calculate uniform cells
Dxn (#codeStream {
    code #{
        scalar suma = 0;
        int i = 0;
        for (i=0 ; i<$cellsAxialAir ; i++)
            suma += pow($expRatioAxial , (i/($cellsAxialAir - 1.0)) );
        os << ($L_a-$L_d)/suma << endl;
    #};
} ); 
cellsAxialDiel #calc "int(1.0*$Z_d/$Dxn + 0.5)";
cellsAxialEle #calc "int(1.0*$L_e/$Dxn + 0.5)";

Dyn (#codeStream {
    code #{
        scalar suma = 0;
        int i = 0;
        for (i=0 ; i<$cellsRadialAir ; i++)
            suma += pow($expRatioRadial , (i/($cellsRadialAir - 1.0)) );
        os << ($R_a-$R_o)/suma << endl;
    #};
} ); 
cellsRadialDiel #calc "int(1.0*($R_o-$R_i)/$Dyn + 0.5)";
cellsRadialGas #calc "int(1.0*($R_i-$R_e)/$Dyn + 0.5)";
cellsRadialEle #calc "int(1.0*($R_e)/$Dyn + 0.5)";

// Calculate vertices' coordinates
X0 #calc "0";                                     Y0 #calc "0";
X1 #calc "-$R_e*sin(0.5*$thetaRad)";              Y1 #calc "$R_e*cos(0.5*$thetaRad)";
X2 #calc "$R_e*sin(0.5*$thetaRad)";               Y2 #calc "$R_e*cos(0.5*$thetaRad)";
X3 #calc "-$R_i*sin(0.5*$thetaRad)";              Y3 #calc "$R_i*cos(0.5*$thetaRad)";
X4 #calc "$R_i*sin(0.5*$thetaRad)";               Y4 #calc "$R_i*cos(0.5*$thetaRad)";
X5 #calc "-$R_o*sin(0.5*$thetaRad)";              Y5 #calc "$R_o*cos(0.5*$thetaRad)";
X6 #calc "$R_o*sin(0.5*$thetaRad)";               Y6 #calc "$R_o*cos(0.5*$thetaRad)";
X29 #calc "-$R_a*sin(0.5*$thetaRad)";             Y29 #calc "$R_a*cos(0.5*$thetaRad)";
X30 #calc "$R_a*sin(0.5*$thetaRad)";              Y30 #calc "$R_a*cos(0.5*$thetaRad)";

vertices
(
    ($X0 $Y0 $Z_e)            // 0
    ($X1 $Y1 $Z_e)            // 1
    ($X2 $Y2 $Z_e)            // 2
    ($X3 $Y3 $Z_e)            // 3
    ($X4 $Y4 $Z_e)            // 4
    ($X5 $Y5 $Z_e)            // 5
    ($X6 $Y6 $Z_e)            // 6

    ($X0 $Y0 $Z_d)            // 7
    ($X1 $Y1 $Z_d)            // 8
    ($X2 $Y2 $Z_d)            // 9
    ($X3 $Y3 $Z_d)            // 10
    ($X4 $Y4 $Z_d)            // 11
    ($X5 $Y5 $Z_d)            // 12
    ($X6 $Y6 $Z_d)            // 13

    ($X1 $Y1 $Z_b)            // 14
    ($X2 $Y2 $Z_b)            // 15
    ($X3 $Y3 $Z_b)            // 16
    ($X4 $Y4 $Z_b)            // 17
    ($X5 $Y5 $Z_b)            // 18
    ($X6 $Y6 $Z_b)            // 19

    ($X0 $Y0 $Z_a)            // 20
    ($X1 $Y1 $Z_a)            // 21
    ($X2 $Y2 $Z_a)            // 22
    ($X3 $Y3 $Z_a)            // 23
    ($X4 $Y4 $Z_a)            // 24
    ($X5 $Y5 $Z_a)            // 25
    ($X6 $Y6 $Z_a)            // 26

    ($X29 $Y29 $Z_b)          // 27
    ($X30 $Y30 $Z_b)          // 28
    ($X29 $Y29 $Z_e)          // 29
    ($X30 $Y30 $Z_e)          // 30
    ($X29 $Y29 $Z_d)          // 31
    ($X30 $Y30 $Z_d)          // 32
    ($X29 $Y29 $Z_a)          // 33
    ($X30 $Y30 $Z_a)          // 34
);

blocks
(
    hex (0 7 7 0 1 8 9 2) region0 ($cellsAxialDiel 1 $cellsRadialEle) simpleGrading (1 1 1)      // Block 0
    hex (1 8 9 2 3 10 11 4) region0 ($cellsAxialDiel 1 $cellsRadialGas) simpleGrading (1 1 1)      // Block 1
    hex (3 10 11 4 5 12 13 6) dielectric ($cellsAxialDiel 1 $cellsRadialDiel) simpleGrading (1 1 1)      // Block 2
    hex (14 1 2 15 16 3 4 17) region0 ($cellsAxialEle 1 $cellsRadialGas) simpleGrading (1 1 1)      // Block 3
    hex (16 3 4 17 18 5 6 19) dielectric ($cellsAxialEle 1 $cellsRadialDiel) simpleGrading (1 1 1)      // Block 4
    hex (7 20 20 7 8 21 22 9) region0 ($cellsAxialAir 1 $cellsRadialEle) simpleGrading ($expRatioAxial 1 1) // Block 5  
    hex (8 21 22 9 10 23 24 11) region0 ($cellsAxialAir 1 $cellsRadialGas) simpleGrading ($expRatioAxial 1 1) // Block 6
    hex (10 23 24 11 12 25 26 13) region0 ($cellsAxialAir 1 $cellsRadialDiel) simpleGrading ($expRatioAxial 1 1) // Block 7
    hex (18 5 6 19 27 29 30 28) region0 ($cellsAxialEle 1 $cellsRadialAir) simpleGrading (1 1 $expRatioRadial)      // Block 8
    hex (5 12 13 6 29 31 32 30) region0 ($cellsAxialDiel 1 $cellsRadialAir) simpleGrading (1 1 $expRatioRadial)      // Block 9
    hex (12 25 26 13 31 33 34 32) region0 ($cellsAxialAir 1 $cellsRadialAir) simpleGrading ($expRatioAxial 1 $expRatioRadial) // Block 10
);

boundary
(
    electrode
    {
        type patch;
        faces
        (
            (0 0 1 2)   // From Block 0
            (14 15 2 1) // From Block 3
        );
    }

    gasInlet
    {
        type patch;
        faces
        (
            (14 16 17 15)   // From Block 3
        );
    }

    airInlet
    {
        type patch;
        faces
        (
            (18 27 28 19)   // From Block 8
        );
    }

    dielectricInlet
    {
        type wall;
        faces
        (
            (16 18 19 17)   // From Block 4
        );
    }

    outlet
    {
        type patch;
        faces
        (
            (20 20 22 21)   // From Block 5
            (21 22 24 23)   // From Block 6
            (23 24 26 25)   // From Block 7
            (25 26 34 33)   // From Block 10
        );
    }

    topBoundary
    {
        type patch;
        faces
        (
            (27 29 30 28)   // From Block 8
            (29 31 32 30)   // From Block 9
            (31 33 34 32)   // From Block 10
        );
    }

    axis
    {
        type empty;
        faces
        (
            (0 7 7 0)   // From Block 0
            (7 20 20 7)   // From Block 5
        );
    }

    frontWedge
    {
        type wedge;
        faces
        (
            (0 7 8 1)   // From Block 0
            (1 8 10 3)   // From Block 1
            (3 10 12 5)   // From Block 2
            (14 1 3 16)   // From Block 3
            (16 3 5 18)   // From Block 4
            (7 20 21 8)   // From Block 5
            (8 21 23 10)   // From Block 6
            (10 23 25 12)   // From Block 7
            (18 5 29 27)   // From Block 8
            (5 12 31 29)   // From Block 9
            (12 25 33 31)   // From Block 10
        );
    }

    backWedge
    {
        type wedge;
        faces
        (
            (0 2 9 7)   // From Block 0
            (2 4 11 9)   // From Block 1
            (11 4 6 13)   // From Block 2
            (15 17 4 2)   // From Block 3
            (17 19 6 4)   // From Block 4
            (7 9 22 20)   // From Block 5
            (9 11 24 22)   // From Block 6
            (11 13 26 24)   // From Block 7
            (19 28 30 6)   // From Block 8
            (6 30 32 13)   // From Block 9
            (13 32 34 26)   // From Block 10
        );
    }

);

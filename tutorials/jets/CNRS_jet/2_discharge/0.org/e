/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2312                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volScalarField;
    object      e;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 -3 0 0 0 0 0];

internalField   #codeStream // Use codeStream to set the value of the initial conditions
{
        codeInclude
        #{
            #include "fvCFD.H"
        #};
        codeOptions
        #{
            -I$(LIB_SRC)/finiteVolume/lnInclude \
            -I$(LIB_SRC)/meshTools/lnInclude
        #};
        codeLibs
        #{
            -lmeshTools \
            -lfiniteVolume
        #};
        // Depending of what are you trying to do, you will need to add new files, options and libraries.
        // For most of the cases, this part is always the same.
       
        code // Insert your code here. At this point, you need to know how to access internal mesh information
        #{
            const IOdictionary& d = static_cast<const IOdictionary&>(dict);
            const fvMesh& mesh = refCast<const fvMesh>(d.db());
            // Access internal mesh information
           

            scalarField e(mesh.nCells(), 0.);

            scalar e0 = 1.0e16;
            scalar s0 = 25e-6;
           
            forAll(e, i)
            {
                //Access cell centers coordinates
                const scalar r = mesh.C()[i][1];
                const scalar z = mesh.C()[i][2];
                
                // Triangular plasma region - linear distribution in the x-y plane

                e[i] = e0*exp(-(1/(2.0*s0*s0)*(r*r + z*z)));

                
            }

            // writeEntry(os, "", rhoq);
            // rhoq.write();
            e.writeEntry("", os);
        #};
};

boundaryField
{    
    electrode
    {
        type            zeroGradient;
    }

    gasInlet
    {
        type            zeroGradient;
    }

    airInlet
    {
        type            zeroGradient;
    }

    outlet
    {
        type            zeroGradient;
    }

    topBoundary
    {
        type            zeroGradient;
    }

    region0_to_dielectric
    {
        type            zeroGradient;
    }

    axis
    {
        type            empty;
    }

    frontWedge
    {
        type            wedge;
    }

    backWedge
    {
        type            wedge;
    }
}

// ************************************************************************* //

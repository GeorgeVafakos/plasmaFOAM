/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  7
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 1.0;

// Geometric parameters
L 1.0;                              // Domain length in x-axis
H_Air 0.5;                          // Air height
H_Ins 0.5;                          // Total Dielectric height
t_Diel 0.000425;                    // Dielectric between electrodes thickness

// Grid managment in x-direction
cellsxNonUniRHS 40;                 // Cells in RHS non-uniform part of the domain in the x-axis
LUniRHS 0.025;                      // Length of domain in the RHS containing non-uniform cells
cellsxNonUniLHS 40;                 // Cells in LHS non-uniform part of the domain in the x-axis
LUniLHS 0.020;                      // Percentage of domain in the LHS containing non-uniform cells
expRatiox 1000.0;                    // Expansion ratio of the left side of the domain in the x-axis

// Grid managment in y-direction
cellsyNonUniAir 40;                 // Cells in Air non-uniform part of the domain in the y-axis
HUniAir 0.001;                      // Percentage of domain in the Air containing non-uniform cells
cellsyNonUniIns 40;                 // Cells in Insulator non-uniform part of the domain in the y-axis
HUniIns 0.002;                      // Percentage of domain in the Insulator containing non-uniform cells
expRatioy 1000.0;                    // Expansion ratio of the left side of the domain in the y-axis

// Grid managment in z-direction
z_start 0.03;                       // Start in z-axis
z_end 0.04;                         // End in z-axis



// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// The rest of the code will automatically create a DBD geometry, according to the parameters defined above.

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// x-axis
LUniPercRHS #calc "$LUniRHS/$L";
LnonUniPercRHS #calc "0.5 - $LUniPercRHS";
LnonUniRHS #calc "0.5*$L-$LUniRHS";
Dxn (#codeStream {
    code #{
        scalar suma = 0;
        int i = 0;
        for (i=0 ; i<$cellsxNonUniRHS ; i++)
            suma += pow($expRatiox , (i/($cellsxNonUniRHS - 1.0)) );
        os << $LnonUniRHS/suma << endl;
    #};
} ); 
cellsxUniRHS #calc "int($LUniRHS/$Dxn + 0.5)";
cellsxTotalRHS #calc "$cellsxNonUniRHS + $cellsxUniRHS";
cellsxNonUniPercRHS #calc "1.0*$cellsxNonUniRHS/$cellsxTotalRHS";
cellsxUniPercRHS #calc "1.0*$cellsxUniRHS/$cellsxTotalRHS";

LUniPercLHS #calc "$LUniLHS/$L";
LnonUniPercLHS #calc "0.5 - $LUniPercLHS";
LnonUniLHS #calc "0.5*$L-$LUniLHS";
cellsxUniLHS #calc "int($LUniLHS/$Dxn + 0.5)";
cellsxTotalLHS #calc "$cellsxNonUniLHS + $cellsxUniLHS";
cellsxNonUniPercLHS #calc "1.0*$cellsxNonUniLHS/$cellsxTotalLHS";
cellsxUniPercLHS #calc "1.0*$cellsxUniLHS/$cellsxTotalLHS";

expRatioxLHS #calc "1.0/$expRatiox";

cellsxTotal #calc "$cellsxTotalRHS+$cellsxTotalLHS";
LUniPerc #calc "$LUniPercRHS+$LUniPercLHS";
cellsxUniPerc #calc "$cellsxUniPercRHS+$cellsxUniPercLHS";


// y-axis
HUniPercAir #calc "$HUniAir/$H_Air";
HnonUniAir #calc "$H_Air-$HUniAir";
HnonUniPercAir #calc "$HnonUniAir/$H_Air";
Dyn (#codeStream {
    code #{
        scalar suma = 0;
        int i = 0;
        for (i=0 ; i<$cellsyNonUniAir ; i++)
            suma += pow($expRatioy , (1.0*i/($cellsyNonUniAir - 1.0)) );
        os << $HnonUniAir/suma << endl;
    #};
} ); 
cellsyUniAir #calc "int($HUniAir/$Dyn + 0.5)";
cellsyTotalAir #calc "$cellsyNonUniAir + $cellsyUniAir";
cellsyNonUniPercAir #calc "1.0*$cellsyNonUniAir/$cellsyTotalAir";
cellsyUniPercAir #calc "1.0*$cellsyUniAir/$cellsyTotalAir";
cellsyDiel #calc "int(1.0*$t_Diel/$Dyn + 0.5)";

HUniPercIns #calc "$HUniIns/($H_Ins-$t_Diel)";
HnonUniPercIns #calc "1.0-$HUniPercAir";
HnonUniIns #calc "$H_Ins-$HUniIns-$t_Diel";
cellsyUniIns #calc "int($HUniIns/$Dyn + 0.5)";
cellsyTotalIns #calc "$cellsyNonUniIns + $cellsyUniIns";
cellsyNonUniPercIns #calc "1.0*$cellsyNonUniIns/$cellsyTotalIns";
cellsyUniPercIns #calc "1.0*$cellsyUniIns/$cellsyTotalIns";

expRatioyIns #calc "1.0/$expRatioy";

// Calculated parameters for vertices positions
X0 #calc "-0.5*$L";
Y0 0.0;
X1 #calc "0.5*$L";
Y1 0.0;
X2 #calc "-0.5*$L";
Y2 #calc "$H_Air";
X3 #calc "0.5*$L";
Y3 #calc "$H_Air";
X4 #calc "-0.5*$L";
Y4 0.0;
X5 #calc "0.5*$L";
Y5 0.0;
X6 #calc "-0.5*$L";
Y6 #calc "$H_Air";
X7 #calc "0.5*$L";
Y7 #calc "$H_Air";
X8 #calc "-0.5*$L";
Y8 #calc "-$t_Diel";
X9 #calc "0.5*$L";
Y9 #calc "-$t_Diel";
X10 #calc "-0.5*$L";
Y10 #calc "-$t_Diel";
X11 #calc "0.5*$L";
Y11 #calc "-$t_Diel";
X12 #calc "-0.5*$L";
Y12 #calc "-$H_Ins";
X13 #calc "0.5*$L";
Y13 #calc "-$H_Ins";
X14 #calc "-0.5*$L";
Y14 #calc "-$H_Ins";
X15 #calc "0.5*$L";
Y15 #calc "-$H_Ins";


vertices
(
    ($X0 $Y0 $z_start)                      // 0
    ($X1 $Y1 $z_start)                      // 1
    ($X2 $Y2 $z_start)                      // 2
    ($X3 $Y3 $z_start)                      // 3
    ($X4 $Y4 $z_end)                        // 4
    ($X5 $Y5 $z_end)                        // 5
    ($X6 $Y6 $z_end)                        // 6
    ($X7 $Y7 $z_end)                        // 7
    ($X8 $Y8 $z_start)                      // 8
    ($X9 $Y9 $z_start)                      // 9
    ($X10 $Y10 $z_end)                      // 10
    ($X11 $Y11 $z_end)                      // 11
    ($X12 $Y12 $z_start)                    // 12
    ($X13 $Y13 $z_start)                    // 13
    ($X14 $Y14 $z_end)                      // 14
    ($X15 $Y15 $z_end)                      // 15
);


blocks
(
    hex (0 1 3 2 4 5 7 6) ($cellsxTotal $cellsyTotalAir 1)                 // Block 0
    simpleGrading
    (
        (
            ($LnonUniPercLHS $cellsxNonUniPercLHS $expRatioxLHS)
            ($LUniPerc $cellsxUniPerc 1)
            ($LnonUniPercRHS $cellsxNonUniPercRHS $expRatiox)
        )
        (
            ($HUniPercAir $cellsyUniPercAir 1)
            ($HnonUniPercAir $cellsyNonUniPercAir $expRatioy)
        )
        1 
    )

    hex (8 9 1 0 10 11 5 4) ($cellsxTotal $cellsyDiel 1)                      // Block 1
    simpleGrading 
    (
        (
            ($LnonUniPercLHS $cellsxNonUniPercLHS $expRatioxLHS)
            ($LUniPerc $cellsxUniPerc 1)
            ($LnonUniPercRHS $cellsxNonUniPercRHS $expRatiox)
        )
        1
        1
    )   

    hex (12 13 9 8 14 15 11 10) ($cellsxTotal $cellsyTotalIns 1)                      // Block 2
    simpleGrading 
    (
        (
            ($LnonUniPercLHS $cellsxNonUniPercLHS $expRatioxLHS)
            ($LUniPerc $cellsxUniPerc 1)
            ($LnonUniPercRHS $cellsxNonUniPercRHS $expRatiox)
        )
        (
            ($HnonUniPercIns $cellsyNonUniPercIns $expRatioyIns)
            ($HUniPercIns $cellsyUniPercIns 1)
        )
        1
    )   
);

edges
(
);

boundary
(
    upperBoundary
    {
        type wall;
        faces
        (
            (2 6 7 3) // From Block 0
        );
    }

    leftBoundary
    {
        type wall;
        faces
        (
            (2 6 4 0)  // from Block 0
            (0 4 10 8) // From Block 1
            (8 10 14 12) // From Block 2
        );
    }

    rightBoundary
    {
        type wall;
        faces
        (
            (3 7 5 1)  // From Block 0
            (1 5 11 9)   // From Block 1
            (9 11 15 13)  // From Block 2
        );
    }   

    bottomBoundary
    {
        type wall;
        faces
        (
            (13 15 14 12) // From Block 2
        );
    }


    frontAndBack
    {
        type empty;
        faces
        (
            // Front
            (2 3 1 0)   // From Block 0
            (0 1 9 8)   // From Block 1
            (8 9 13 12)   // From Block 2

            // Back
            (7 6 4 5) // from block 0
            (5 4 10 11) // from block 1
            (11 10 14 15) // From Block 2
        );
    }
);

mergePatchPairs
(
);

// ************************************************************************* //
